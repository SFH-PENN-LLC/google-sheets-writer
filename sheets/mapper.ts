/**
 * –ú–∞–ø–ø–µ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è JSON –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–∏ Google Sheets
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö, –≤—Å–µ–≥–¥–∞ –∏—â–µ—Ç –ø–æ–ª–µ "date"
 */

export interface ProcessedRecord {
	data: Record<string, any>;
	rowNumber?: number;
}

export class RecordMapper {
	private dateFields: string[];

	constructor() {
		// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
		// DateStandardizer —É–∂–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª –≤—Å–µ –ø–æ–ª—è –¥–∞—Ç –≤ "date"
		this.dateFields = ['date'];

		console.log(`üìÖ Using date fields: ${this.dateFields.join(', ')}`);
		console.log(`üîß Relying on data preprocessing (DateStandardizer) for date field standardization`);
	}

	/**
	 * –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∑–∞–ø–∏—Å–µ–π
	 */
	collectAllFields(records: Record<string, any>[]): string[] {
		const fields = new Set<string>();

		for (const record of records) {
			Object.keys(record).forEach(key => {
				if (key !== '__rowNumber') { // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
					fields.add(key);
				}
			});
		}

		return Array.from(fields);
	}

	/**
	 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–æ–≤—ã–º–∏ (–Ω–æ–≤—ã–µ –≤ –∫–æ–Ω—Ü–µ)
	 */
	mergeColumns(existingColumns: string[], newFields: string[]): string[] {
		const result = [...existingColumns];

		for (const field of newFields) {
			if (!result.includes(field)) {
				result.push(field);
			}
		}

		return result;
	}

	/**
	 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è Google Sheets
	 */
	recordsToRows(records: Record<string, any>[], columns: string[]): any[][] {
		return records.map(record =>
			columns.map(column => this.processFieldValue(record[column], column))
		);
	}

	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è —Å —É—á–µ—Ç–æ–º –µ–≥–æ —Ç–∏–ø–∞
	 */
	private processFieldValue(value: any, columnName: string): any {
		if (value == null || value === '') {
			return '';
		}

		// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É YYYY-MM-DD
		if (this.isDateField(columnName)) {
			const normalized = this.normalizeDate(String(value));
			return normalized || String(value);
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –º–∞—Å—Å–∏–≤–æ–≤
		if (Array.isArray(value) || (typeof value === 'object' && value !== null)) {
			return JSON.stringify(value);
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–µ–ª
		if (typeof value === 'number') {
			return value;
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
		if (typeof value === 'boolean') {
			return value;
		}

		// –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
		return String(value);
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –¥–∞—Ç–æ–π
	 */
	private isDateField(columnName: string): boolean {
		return this.dateFields.includes(columnName.toLowerCase());
	}

	/**
	 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
	 */
	normalizeDate(dateString: string): string {
		if (!dateString) return '';

		try {
			const cleaned = dateString.trim();

			// –ï—Å–ª–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
			if (/^\d{4}-\d{2}-\d{2}$/.test(cleaned)) {
				const date = new Date(cleaned + 'T00:00:00.000Z');
				if (!isNaN(date.getTime())) {
					return cleaned;
				}
			}

			// –ü–∞—Ä—Å–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
			const date = new Date(cleaned);
			if (isNaN(date.getTime())) {
				return '';
			}

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ YYYY-MM-DD
			const year = date.getFullYear();
			const month = String(date.getMonth() + 1).padStart(2, '0');
			const day = String(date.getDate()).padStart(2, '0');

			return `${year}-${month}-${day}`;
		} catch {
			return '';
		}
	}

	/**
	 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—ã –∏–∑ –∑–∞–ø–∏—Å–µ–π
	 * –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞, –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É
	 */
	extractDatesFromRecords(records: Record<string, any>[]): string[] {
		const dates = new Set<string>();
		let foundDateFields = false;

		console.log(`üîç Looking for date field: "date" (standardized by preprocessing)`);

		for (const record of records) {
			const date = this.getRecordDate(record);
			if (date) {
				foundDateFields = true;
				const normalizedDate = this.normalizeDate(date);
				if (normalizedDate) {
					dates.add(normalizedDate);
					console.log(`üìÖ Found date: ${date} -> ${normalizedDate}`);
				}
			}
		}

		if (!foundDateFields && records.length > 0) {
			console.error(`‚ùå CRITICAL: No "date" field found in records!`);
			console.error(`   Available fields: ${Object.keys(records[0]).join(', ')}`);
			console.error(`   Expected field: "date"`);
			console.error(`   üîß Check data preprocessing (DateStandardizer) - it should create "date" field`);
			console.error(`   ‚ö†Ô∏è  Incremental mode will append all new data without cleanup`);
		} else if (foundDateFields) {
			console.log(`‚úÖ Found ${dates.size} unique dates: ${Array.from(dates).join(', ')}`);
		}

		return Array.from(dates).sort();
	}

	/**
	 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –∏–∑ –∑–∞–ø–∏—Å–∏
	 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ "date"
	 */
	getRecordDate(record: Record<string, any>): string {
		// –ü–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É - –∏—â–µ–º —Ç–æ–ª—å–∫–æ "date"
		if (record.date) {
			return String(record.date);
		}

		return '';
	}

	/**
	 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ Google Sheets –æ–±—Ä–∞—Ç–Ω–æ –≤ –∑–∞–ø–∏—Å–∏
	 */
	rowsToRecords(rows: string[][], headers: string[]): ProcessedRecord[] {
		const records: ProcessedRecord[] = [];

		for (let i = 1; i < rows.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
			const row = rows[i];

			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
			if (!row || row.every((cell: any) => !cell || cell.toString().trim() === '')) {
				continue;
			}

			const record: Record<string, any> = {};

			headers.forEach((header, index) => {
				let cellValue = row[index] || '';

				// –£–¥–∞–ª—è–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏–∑ –¥–∞—Ç –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏
				if (typeof cellValue === 'string' && cellValue.startsWith("'")) {
					cellValue = cellValue.substring(1);
				}

				record[header] = cellValue;
			});

			records.push({
				data: record,
				rowNumber: i + 1 // Google Sheets 1-indexed
			});
		}

		return records;
	}

	/**
	 * –ù–∞—Ö–æ–¥–∏—Ç –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–∞—Ç–∞–º–∏
	 */
	findDateColumnIndices(columns: string[]): number[] {
		const indices: number[] = [];

		columns.forEach((column, index) => {
			if (this.isDateField(column)) {
				indices.push(index);
			}
		});

		return indices;
	}

	/**
	 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
	 */
	groupConsecutiveRanges(numbers: number[]): Array<{start: number, end: number}> {
		if (numbers.length === 0) return [];

		const sorted = [...numbers].sort((a, b) => b - a);
		const ranges: Array<{start: number, end: number}> = [];

		let start = sorted[0];
		let end = sorted[0];

		for (let i = 1; i < sorted.length; i++) {
			if (sorted[i] === end - 1) {
				end = sorted[i];
			} else {
				ranges.push({ start: end, end: start });
				start = sorted[i];
				end = sorted[i];
			}
		}

		ranges.push({ start: end, end: start });

		return ranges;
	}

	/**
	 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
	 */
	validatePreprocessing(records: Record<string, any>[]): boolean {
		if (records.length === 0) {
			console.warn('‚ö†Ô∏è  No records to validate');
			return true;
		}

		const firstRecord = records[0];
		const hasDateField = firstRecord.hasOwnProperty('date');

		console.log('\nüîç PREPROCESSING VALIDATION:');
		console.log(`   Records count: ${records.length}`);
		console.log(`   Has "date" field: ${hasDateField ? '‚úÖ YES' : '‚ùå NO'}`);

		if (hasDateField) {
			console.log(`   Sample date value: "${firstRecord.date}"`);
		} else {
			console.log(`   Available fields: ${Object.keys(firstRecord).join(', ')}`);
			console.error('‚ùå DateStandardizer failed to create "date" field!');
			return false;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
		const recordsWithoutDate = records.filter(r => !r.date);
		if (recordsWithoutDate.length > 0) {
			console.error(`‚ùå ${recordsWithoutDate.length} records missing "date" field`);
			return false;
		}

		console.log('‚úÖ All records have "date" field - preprocessing worked correctly');
		return true;
	}
}
