import { retryOperation } from './retry.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å Google Sheets
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ valueInputOption –¥–ª—è –¥–∞—Ç
 */

export interface SheetRange {
	start: number;
	end: number;
}

export interface SheetServiceConfig {
	sheets: any;
	sheetId: string;
	sheetName: string;
}

export class SheetService {
	private sheets: any;
	private sheetId: string;
	private sheetName: string;

	constructor(config: SheetServiceConfig) {
		this.sheets = config.sheets;
		this.sheetId = config.sheetId;
		this.sheetName = config.sheetName;
	}

	/**
	 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–∏—Å—Ç–∞ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ 10000 —Å—Ç—Ä–æ–∫)
	 */
	async getAllData(): Promise<string[][]> {
		return await retryOperation(async () => {
			// –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ª–∏—Å—Ç–∞
			const sheetInfo = await this.sheets.spreadsheets.get({
				spreadsheetId: this.sheetId,
				ranges: [this.sheetName],
				fields: 'sheets.properties'
			});

			const sheet = sheetInfo.data.sheets?.[0];
			const gridProperties = sheet?.properties?.gridProperties;

			if (!gridProperties) {
				return [];
			}

			const actualRowCount = gridProperties.rowCount || 0;
			const actualColumnCount = gridProperties.columnCount || 0;

			if (actualRowCount === 0) {
				return [];
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
			const lastColumn = this.numberToColumnLetter(actualColumnCount);
			console.log(`üìè Sheet dimensions: ${actualRowCount} rows √ó ${actualColumnCount} columns`);

			// –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–∏—Å—Ç–∞
			const dataResponse = await this.sheets.spreadsheets.values.get({
				spreadsheetId: this.sheetId,
				range: `${this.sheetName}!A1:${lastColumn}${actualRowCount}`,
				// –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º FORMATTED_VALUE –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç
				valueRenderOption: 'FORMATTED_VALUE'
			});

			return dataResponse.data.values || [];
		});
	}

	/**
	 * –û—á–∏—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö (—Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
	 */
	async clearRowValues(rowRanges: SheetRange[], columnCount: number): Promise<void> {
		if (rowRanges.length === 0) return;

		const lastCol = this.numberToColumnLetter(columnCount);

		for (const range of rowRanges) {
			const rangeStr = range.start === range.end
				? `${this.sheetName}!A${range.start}:${lastCol}${range.start}`
				: `${this.sheetName}!A${range.start}:${lastCol}${range.end}`;

			await retryOperation(async () => {
				await this.sheets.spreadsheets.values.clear({
					spreadsheetId: this.sheetId,
					range: rangeStr
				});
			});

			// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
			await this.delay(200);
		}
	}

	/**
	 * –ë–ï–ó–û–ü–ê–°–ù–û —É–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ (–ø–æ –æ–¥–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –∑–∞ —Ä–∞–∑, —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
	 */
	async deleteRows(rowRanges: SheetRange[]): Promise<void> {
		if (rowRanges.length === 0) return;

		const sheetId = await this.getSheetId();

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é (—É–¥–∞–ª—è–µ–º —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
		const sortedRanges = [...rowRanges].sort((a, b) => b.start - a.start);

		console.log(`üóëÔ∏è  Deleting ${sortedRanges.length} row ranges...`);

		// –£–¥–∞–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–º–µ—â–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
		for (const range of sortedRanges) {
			try {
				await retryOperation(async () => {
					await this.sheets.spreadsheets.batchUpdate({
						spreadsheetId: this.sheetId,
						requestBody: {
							requests: [{
								deleteDimension: {
									range: {
										sheetId: sheetId,
										dimension: 'ROWS',
										startIndex: range.start - 1, // Google Sheets 0-indexed –¥–ª—è API
										endIndex: range.end // endIndex –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è
									}
								}
							}]
						}
					});
				});

				console.log(`‚úÖ Deleted rows ${range.start}-${range.end}`);

				// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
				await this.delay(300);

			} catch (error) {
				console.error(`‚ùå Failed to delete rows ${range.start}-${range.end}:`, error);
				// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª—è—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
			}
		}
	}

	/**
	 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω–µ—Ü –ª–∏—Å—Ç–∞
	 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç USER_ENTERED –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
	 */
	async appendRows(data: any[][], valueInputOption: 'RAW' | 'USER_ENTERED' = 'USER_ENTERED'): Promise<void> {
		await retryOperation(async () => {
			await this.sheets.spreadsheets.values.append({
				spreadsheetId: this.sheetId,
				range: this.sheetName,
				valueInputOption,
				insertDataOption: 'INSERT_ROWS',
				requestBody: { values: data }
			});
		});
	}

	/**
	 * –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –ª–∏—Å—Ç–∞
	 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç USER_ENTERED –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
	 */
	async replaceAllData(data: any[][], columnCount: number): Promise<void> {
		const columnRange = `A:${this.numberToColumnLetter(columnCount)}`;

		await retryOperation(async () => {
			// –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
			await this.sheets.spreadsheets.values.clear({
				spreadsheetId: this.sheetId,
				range: `${this.sheetName}!${columnRange}`
			});

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å USER_ENTERED –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			await this.sheets.spreadsheets.values.update({
				spreadsheetId: this.sheetId,
				range: `${this.sheetName}!A1`,
				valueInputOption: 'USER_ENTERED', // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 'RAW'
				requestBody: { values: data }
			});
		});
	}

	/**
	 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
	 */
	async addColumns(newColumns: string[], startColumn: number): Promise<void> {
		if (newColumns.length === 0) return;

		const startColumnLetter = this.numberToColumnLetter(startColumn + 1);

		await retryOperation(async () => {
			await this.sheets.spreadsheets.values.update({
				spreadsheetId: this.sheetId,
				range: `${this.sheetName}!${startColumnLetter}1`,
				valueInputOption: 'RAW', // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Å–µ–≥–¥–∞ –∫–∞–∫ RAW
				requestBody: { values: [newColumns] }
			});
		});
	}

	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏
	 */
	async formatDateColumns(dateColumnIndices: number[]): Promise<void> {
		if (dateColumnIndices.length === 0) return;

		try {
			const sheetId = await this.getSheetId();

			const requests = dateColumnIndices.map(columnIndex => ({
				repeatCell: {
					range: {
						sheetId: sheetId,
						startColumnIndex: columnIndex,
						endColumnIndex: columnIndex + 1
					},
					cell: {
						userEnteredFormat: {
							numberFormat: {
								type: 'DATE',
								pattern: 'yyyy-mm-dd'
							}
						}
					},
					fields: 'userEnteredFormat.numberFormat'
				}
			}));

			await retryOperation(async () => {
				await this.sheets.spreadsheets.batchUpdate({
					spreadsheetId: this.sheetId,
					requestBody: { requests }
				});
			});
		} catch (error) {
			console.warn('‚ö†Ô∏è  Could not format date columns:', error);
			// –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
		}
	}

	/**
	 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ
	 */
	async getAvailableRows(): Promise<number> {
		try {
			const response = await retryOperation(async () => {
				return await this.sheets.spreadsheets.get({
					spreadsheetId: this.sheetId,
					ranges: [this.sheetName],
					fields: 'sheets.properties'
				});
			});

			const sheet = response.data.sheets?.[0];
			if (sheet && sheet.properties && sheet.properties.gridProperties) {
				return sheet.properties.gridProperties.rowCount || 0;
			}

			return 0;
		} catch (error) {
			console.warn('‚ö†Ô∏è  Could not get sheet row count:', error);
			return 0;
		}
	}

	/**
	 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∫ –ª–∏—Å—Ç—É
	 */
	async addRowsToSheet(rowsToAdd: number): Promise<void> {
		try {
			const sheetId = await this.getSheetId();

			await retryOperation(async () => {
				return await this.sheets.spreadsheets.batchUpdate({
					spreadsheetId: this.sheetId,
					requestBody: {
						requests: [{
							appendDimension: {
								sheetId: sheetId,
								dimension: 'ROWS',
								length: rowsToAdd
							}
						}]
					}
				});
			});

			console.log(`‚úÖ Added ${rowsToAdd} rows to sheet`);
		} catch (error) {
			console.warn('‚ö†Ô∏è  Could not add rows to sheet:', error);
			// –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, append –º–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
		}
	}

	/**
	 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ A1
	 */
	async writeMessage(message: string): Promise<void> {
		await retryOperation(async () => {
			await this.sheets.spreadsheets.values.update({
				spreadsheetId: this.sheetId,
				range: `${this.sheetName}!A1`,
				valueInputOption: 'RAW',
				requestBody: { values: [[message]] }
			});
		});
	}

	/**
	 * –ü–æ–ª—É—á–∞–µ—Ç ID –ª–∏—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
	 */
	private async getSheetId(): Promise<number> {
		try {
			const response = await retryOperation(async () => {
				return await this.sheets.spreadsheets.get({
					spreadsheetId: this.sheetId,
					fields: 'sheets.properties'
				});
			});

			const sheet = response.data.sheets?.find((s: any) => s.properties?.title === this.sheetName);
			return sheet?.properties?.sheetId || 0;
		} catch (error) {
			console.warn('‚ö†Ô∏è  Could not get sheet ID:', error);
			return 0;
		}
	}

	/**
	 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –≤ –±—É–∫–≤—É (1 = A, 26 = Z, 27 = AA, etc.)
	 */
	private numberToColumnLetter(columnNumber: number): string {
		let result = '';
		while (columnNumber > 0) {
			columnNumber--; // –î–µ–ª–∞–µ–º 0-based
			result = String.fromCharCode(65 + (columnNumber % 26)) + result;
			columnNumber = Math.floor(columnNumber / 26);
		}
		return result;
	}

	/**
	 * –ó–∞–¥–µ—Ä–∂–∫–∞
	 */
	private async delay(ms: number): Promise<void> {
		return new Promise(resolve => setTimeout(resolve, ms));
	}
}
