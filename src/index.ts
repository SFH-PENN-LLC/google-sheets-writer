import { google } from 'googleapis';
import fs from 'fs/promises';
import { SheetService } from '../sheets/service.js';
import { RecordMapper } from '../sheets/mapper.js';

/**
 * –ò–¥–µ–∞–ª—å–Ω—ã–π Google Sheets writer
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç –∏ valueInputOption
 */

interface WriteStats {
	totalRecords: number;
	newRecords: number;
	updatedRecords: number;
	deletedRecords: number;
	newColumns: string[];
}

export class GoogleSheetsWriter {
	private sheetService: SheetService;
	private mapper: RecordMapper;
	private fullRefresh: boolean;
	private dryRun: boolean;
	private lockFile: string;

	constructor() {
		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
		const sheetId = process.env.GOOGLE_SHEET_ID!;
		const sheetName = process.env.SHEET_NAME!;
		this.fullRefresh = process.env.FULL_REFRESH === 'true';
		this.dryRun = process.env.DRY_RUN === 'true';
		this.lockFile = `.writer-lock-${sheetId}-${sheetName}`;

		if (!sheetId || !sheetName || !process.env.GOOGLE_SERVICE_ACCOUNT_JSON) {
			throw new Error('Missing required environment variables: GOOGLE_SHEET_ID, SHEET_NAME, GOOGLE_SERVICE_ACCOUNT_JSON');
		}

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
		const creds = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_JSON);
		const auth = new google.auth.JWT(
			creds.client_email,
			undefined,
			creds.private_key,
			['https://www.googleapis.com/auth/spreadsheets']
		);
		const sheets = google.sheets({ version: 'v4', auth });

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
		this.sheetService = new SheetService({ sheets, sheetId, sheetName });
		this.mapper = new RecordMapper(); // –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –¥–∞—Ç
	}

	/**
	 * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
	 */
	async writeData(dataPath: string): Promise<WriteStats> {
		console.log(`üìä Starting data write from ${dataPath}${this.dryRun ? ' (DRY RUN)' : ''}`);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ dry-run)
		if (!this.dryRun) {
			await this.acquireLock();
		}

		try {
			const newRecords = await this.loadData(dataPath);

			if (newRecords.length === 0) {
				throw new Error('‚ùå No data to write');
			}

			// if (newRecords.length === 0) {
			// 	console.log('‚ö†Ô∏è  No data found');
			//
			// 	if (!this.dryRun) {
			// 		await this.sheetService.writeMessage('No data available');
			// 	}
			//
			// 	return {
			// 		totalRecords: 0,
			// 		newRecords: 0,
			// 		updatedRecords: 0,
			// 		deletedRecords: 0,
			// 		newColumns: []
			// 	};
			// }

			console.log(`üì• Loaded ${newRecords.length} new records`);

			if (this.fullRefresh) {
				return await this.performFullRefresh(newRecords);
			} else {
				return await this.performIncrementalUpdate(newRecords);
			}
		} finally {
			// –í—Å–µ–≥–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
			if (!this.dryRun) {
				await this.releaseLock();
			}
		}
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
	 */
	private async acquireLock(): Promise<void> {
		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ lock —Ñ–∞–π–ª–∞
			await fs.access(this.lockFile);

			// –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
			const stats = await fs.stat(this.lockFile);
			const lockAge = Date.now() - stats.mtime.getTime();

			// –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç - —Å—á–∏—Ç–∞–µ–º –∑–∞–≤–∏—Å—à–µ–π
			if (lockAge > 30 * 60 * 1000) {
				console.warn('‚ö†Ô∏è  Found stale lock file, removing...');
				await fs.unlink(this.lockFile);
			} else {
				throw new Error(`Another writer process is running (lock age: ${Math.round(lockAge / 1000)}s). Please wait or remove ${this.lockFile}`);
			}
		} catch (error: any) {
			if (error.code !== 'ENOENT') {
				throw error;
			}
		}

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
		const lockData = {
			pid: process.pid,
			timestamp: new Date().toISOString(),
			sheet: process.env.SHEET_NAME
		};

		await fs.writeFile(this.lockFile, JSON.stringify(lockData, null, 2));
		console.log(`üîí Acquired lock: ${this.lockFile}`);
	}

	/**
	 * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
	 */
	private async releaseLock(): Promise<void> {
		try {
			await fs.unlink(this.lockFile);
			console.log(`üîì Released lock: ${this.lockFile}`);
		} catch (error) {
			console.warn('‚ö†Ô∏è  Could not remove lock file:', error);
		}
	}

	/**
	 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
	 */
	private async loadData(dataPath: string): Promise<Record<string, any>[]> {
		const rawData = await fs.readFile(dataPath, 'utf-8');
		return JSON.parse(rawData) as Record<string, any>[];
	}

	/**
	 * –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –æ—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
	 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º USER_ENTERED –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
	 */
	private async performFullRefresh(newRecords: Record<string, any>[]): Promise<WriteStats> {
		console.log('üîÑ Performing full refresh');

		const allColumns = this.mapper.collectAllFields(newRecords);
		console.log(`üìã Columns to write: ${allColumns.join(', ')}`);

		const dataRows = this.mapper.recordsToRows(newRecords, allColumns);
		const allData = [allColumns, ...dataRows];

		if (!this.dryRun) {
			await this.sheetService.replaceAllData(allData, allColumns.length);

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏
			const dateColumnIndices = this.mapper.findDateColumnIndices(allColumns);
			if (dateColumnIndices.length > 0) {
				await this.sheetService.formatDateColumns(dateColumnIndices);
			}
		}

		console.log(`‚úÖ Full refresh ${this.dryRun ? 'analyzed' : 'completed'}: ${newRecords.length} records`);

		return {
			totalRecords: newRecords.length,
			newRecords: newRecords.length,
			updatedRecords: 0,
			deletedRecords: 0,
			newColumns: allColumns
		};
	}

	/**
	 * –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–æ–∫
	 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º USER_ENTERED –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
	 */
	private async performIncrementalUpdate(newRecords: Record<string, any>[]): Promise<WriteStats> {
		console.log('‚ûï Performing incremental update with row deletion');

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
		const existingData = await this.sheetService.getAllData();

		if (existingData.length === 0) {
			console.log('üìÑ Sheet is empty, performing initial write');
			return await this.performFullRefresh(newRecords);
		}

		const existingHeaders = existingData[0];
		const existingRecords = this.mapper.rowsToRecords(existingData, existingHeaders);

		console.log(`üìö Loaded ${existingRecords.length} existing records with ${existingHeaders.length} columns`);

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
		const datesToUpdate = this.mapper.extractDatesFromRecords(newRecords);
		console.log(`üìÖ Dates to update: ${datesToUpdate.join(', ')}`);

		// –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
		const rowsToDelete = this.findRowsToDelete(existingRecords, datesToUpdate);
		let deletedCount = 0;

		if (rowsToDelete.length > 0) {
			console.log(`üóëÔ∏è  Will delete ${rowsToDelete.length} rows for dates: ${datesToUpdate.join(', ')}`);

			if (!this.dryRun) {
				// –†–ï–ê–õ–¨–ù–û —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ (deleteDimension)
				const ranges = this.mapper.groupConsecutiveRanges(rowsToDelete);
				await this.sheetService.deleteRows(ranges);
			}

			deletedCount = rowsToDelete.length;
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
		const newFields = this.mapper.collectAllFields(newRecords);
		const finalColumns = this.mapper.mergeColumns(existingHeaders, newFields);
		const newColumns = finalColumns.filter((col: string) => !existingHeaders.includes(col));

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
		if (newColumns.length > 0) {
			console.log(`‚ûï Adding new columns: ${newColumns.join(', ')}`);

			if (!this.dryRun) {
				await this.sheetService.addColumns(newColumns, existingHeaders.length);
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
		const currentDataRows = existingRecords.length - deletedCount;
		const requiredRows = currentDataRows + newRecords.length + 1; // +1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞

		if (!this.dryRun) {
			const availableRows = await this.sheetService.getAvailableRows();
			console.log(`üìè Current data rows: ${currentDataRows}, Available rows: ${availableRows}, Required: ${requiredRows}`);

			if (requiredRows > availableRows || availableRows === 0) {
				console.log(`üìà Need more rows. Adding 5000 rows to sheet...`);
				await this.sheetService.addRowsToSheet(5000);
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
		if (newRecords.length > 0) {
			console.log(`üìù ${this.dryRun ? 'Would append' : 'Appending'} ${newRecords.length} new records`);

			if (!this.dryRun) {
				const dataRows = this.mapper.recordsToRows(newRecords, finalColumns);
				// –ò–°–ü–†–ê–í–õ–ï–ù–û: USER_ENTERED –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫-–¥–∞—Ç
				await this.sheetService.appendRows(dataRows, 'USER_ENTERED');

				// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
				const dateColumnIndices = this.mapper.findDateColumnIndices(finalColumns);
				if (dateColumnIndices.length > 0) {
					await this.sheetService.formatDateColumns(dateColumnIndices);
				}
			}
		}

		const stats: WriteStats = {
			totalRecords: currentDataRows + newRecords.length,
			newRecords: newRecords.length,
			updatedRecords: 0,
			deletedRecords: deletedCount,
			newColumns
		};

		console.log(`‚úÖ Incremental update ${this.dryRun ? 'analyzed' : 'completed'}:`, stats);
		return stats;
	}

	/**
	 * –ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–∞—Ç)
	 */
	private findRowsToDelete(existingRecords: Array<{data: Record<string, any>, rowNumber?: number}>, datesToUpdate: string[]): number[] {
		const rowsToDelete: number[] = [];

		for (const record of existingRecords) {
			const rawDate = this.mapper.getRecordDate(record.data);
			const normalizedDate = this.mapper.normalizeDate(rawDate);

			if (datesToUpdate.includes(normalizedDate) && record.rowNumber) {
				rowsToDelete.push(record.rowNumber);
			}
		}

		return rowsToDelete.sort((a, b) => b - a); // –£–¥–∞–ª—è–µ–º —Å –∫–æ–Ω—Ü–∞
	}
}

/**
 * CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π dry-run
 */
async function main() {
	const args = process.argv.slice(2);
	const dataPath = args[0] || 'data.json';
	const isDryRun = args.includes('--dry-run');

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DRY_RUN –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	if (isDryRun) {
		process.env.DRY_RUN = 'true';
	}

	try {
		const writer = new GoogleSheetsWriter();
		const stats = await writer.writeData(dataPath);

		console.log('\nüìä Final Statistics:');
		console.log(`   Total records: ${stats.totalRecords}`);
		console.log(`   New records: ${stats.newRecords}`);
		console.log(`   Deleted records: ${stats.deletedRecords}`);

		if (stats.newColumns.length > 0) {
			console.log(`   New columns added: ${stats.newColumns.join(', ')}`);
		}

		if (isDryRun) {
			console.log('\nüîç DRY RUN completed - no actual changes made to sheet');
		} else {
			console.log('\nüéâ Google Sheets write completed successfully!');
		}

	} catch (error) {
		console.error('üí• Google Sheets Writer error:', error);
		process.exit(1);
	}
}

main();
